filas = 5
columnas = 5

laberinto = [[' ' for _ in range(columnas)] for _ in range(filas)]

muro = ((0,1), (0,2), (0,3), (0,4), (1,1), (2,1), (2,3), (3,3), (4,0), (4,1), (4,2), (4,3))

laberinto[filas-5][columnas-5] = 'E'
laberinto[filas-1][columnas-1] = 'S'

for coordenada in muro:
    fila, columna = coordenada
    laberinto[fila][columna] = 'X'

for fila in laberinto:
    print(' '.join(fila))

from collections import deque

def encontrar_camino(laberinto):
    filas = len(laberinto)
    columnas = len(laberinto[0])

    direcciones = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    direcciones_nombres = ['Arriba', 'Abajo', 'Izquierda', 'Derecha']

    inicio = (0, 0)
    fin = (filas - 1, columnas - 1)

    cola = deque([(inicio, [])])
    visitados = set()

    while cola:
        (fila, columna), camino = cola.popleft()

        if (fila, columna) == fin:
            return camino

        visitados.add((fila, columna))

        for dir_actual, dir_nombre in zip(direcciones, direcciones_nombres):
            nueva_fila, nueva_columna = fila + dir_actual[0], columna + dir_actual[1]

            if 0 <= nueva_fila < filas and 0 <= nueva_columna < columnas and (nueva_fila, nueva_columna) not in visitados and laberinto[nueva_fila][nueva_columna] != 'X':
                cola.append(((nueva_fila, nueva_columna), camino + [dir_nombre]))

    return None


laberinto = [[' ' for _ in range(columnas)] for _ in range(filas)]
muro = ((0, 1), (0, 2), (0, 3), (0, 4), (1, 1), (2, 1), (2, 3), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3))
laberinto[filas - 5][columnas - 5] = 'E'
laberinto[filas - 1][columnas - 1] = 'S'

for coordenada in muro:
    fila, columna = coordenada
    laberinto[fila][columna] = 'X'

camino_solucion = encontrar_camino(laberinto)

if camino_solucion:
    print(camino_solucion)
else:
    print("No hay camino vÃ¡lido.")
